<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.shop.mappers.adminMapper">
<!-- 카테고리 호출 -->
<select id="category" resultType="com.my.shop.vo.CategoryVO">
<![CDATA[
select
level, cateName, cateCode, cateCodeRef
from goods_category
start with cateCodeRef is null connect by prior cateCode = cateCoderef
]]>
</select>
<insert id="register" parameterType="com.my.shop.vo.GoodsVO">
<![CDATA[
insert into tbl_goods(gdsNum, gdsName, cateCode, gdsPrice, gdsStock, gdsDes, gdsImg, gdsThumbImg)
values
(seq_gdsNum.nextval, #{gdsName}, #{cateCode}, #{gdsPrice}, #{gdsStock}, #{gdsDes}, #{gdsImg}, #{gdsThumbImg})
]]>
</insert>
<!-- 상품목록 -->
<select id="goodslist" resultType="com.my.shop.vo.GoodsVO">
<![CDATA[
select
gdsNum, gdsName, cateCode, gdsPrice, gdsStock, gdsDes, gdsImg, gdsThumbImg, gdsDate
from tbl_goods
order by gdsNum desc
]]>
</select>
<select id="goodsView" resultType="com.my.shop.vo.GoodsViewVO">
<![CDATA[
select 
gdsNum, gdsName, g.cateCode, c.cateCodeRef, c.cateName, gdsPrice, gdsStock, gdsDes, gdsImg, gdsDate
from tbl_goods g
inner join goods_category c
on g.cateCode = c.cateCode
where g.gdsNum = #{gdsNum}
]]>
</select>
<!-- 
Join: 두 개 이상의 테이블에서 관련 열을 기준으로 행을 결합
내부 조인[Inner Join]: 두 테이블에서 일치하는 값을 가진 레코드를 선택
왼쪽/오른쪽 조인[Left/Right Join]: 왼쪽/오른쪽 테이블의 모든 레코드와 오른쪽/왼쪽 테이블의 일치하는 레코드를 리턴
전체[Full]: 양쪽 테이블 레코드에서 일치하는 모든 레코드 리턴
셀프[Self]: 테이블 자체가 자체적으로 조인됩니다

별칭) tbl_goods.gdsNum 간단한 별칭 -> g.gdsNum
import numpy as np
xpoint = np.array([0, 6])
 -->
<update id="goodsModify">
<![CDATA[
update tbl_goods 
set 
gdsName = #{gdsName}, cateCode = #{cateCode}, gdsPrice = #{gdsPrice}, gdsStock = #{gdsStock}, gdsDes = #{gdsDes}, gdsImg = #{gdsImg}, gdsThumbImg = #{gdsThumbImg}
where gdsNum = ${gdsNum}
]]>
</update>
<delete id="goodsDelete">
<![CDATA[
delete tbl_goods where gdsNum = #{gdsNum}
]]>
</delete>
</mapper>
